const o="ezproxy-dismissed-domains",e=document.getElementById("status"),n=document.getElementById("accessButton"),t=document.getElementById("resetDismissed");function s(o,t){console.log(`Updating status: ${o}, isActive: ${t}`),e?(e.textContent=o,e.className="status "+(t?"active":"inactive"),n?n.disabled=!t&&"Banner is currently dismissed for this domain"!==o:console.error("Access button not found in DOM")):console.error("Status div not found in DOM")}document.addEventListener("DOMContentLoaded",(async()=>{try{s("Checking current page...",!1);const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(console.log("Current tab:",e),!e||!e.url)return console.error("No tab or URL found"),void s("Could not access current tab",!1);console.log("Checking URL:",e.url);const t=await async function(){try{console.log("Fetching domain list...");const o=chrome.runtime.getURL("domain-list.json");console.log("Domain list URL:",o);const e=await fetch(o);if(!e.ok)throw new Error(`Failed to fetch domain list: ${e.status} ${e.statusText}`);const n=e.headers.get("content-type");n&&n.includes("application/json")||console.warn("Unexpected content type:",n);const t=await e.json();return console.log("Domain list loaded successfully, entries:",t.length),Array.isArray(t)?t:[]}catch(o){console.error("Error loading domain list:",o);try{const o=(await chrome.storage.local.get("ezproxy-domain-list-backup"))["ezproxy-domain-list-backup"];return console.log("Using backup domain list from storage:",o?o.length:0,"entries"),Array.isArray(o)?o:[]}catch(o){return console.error("Failed to load backup domain list:",o),[]}}}();if(console.log("Domain list loaded, length:",t.length),!t||0===t.length)return console.error("Domain list is empty or failed to load"),void s("Domain list could not be loaded",!1);const i=new URL(e.url);console.log("Current hostname:",i.hostname);const r=await(await fetch(chrome.runtime.getURL("config.json"))).json(),a=r.ezproxyBaseUrl,c=r.libraryHelpUrl,l=r.secondaryHelpButtonText||"Info for this site";function d(o,e){const n=o.replace("."+e,"").replace(/-/g,"."),t=n.split(".");return t.length<=2?n:t.slice(-2).join(".")}if(i.hostname.includes(a)){s("You are already on a proxied page.",!0),n.disabled=!1,n.textContent=l;const h=d(i.hostname,a);let p=c;return p&&(p+=(p.includes("?")?"&":"?")+"q="+encodeURIComponent(h)),void(n.onclick=()=>{chrome.tabs.create({url:p}),window.close()})}const g=t.some((o=>{const e=i.hostname.endsWith(o)||i.hostname===o;return e&&console.log("Match found with domain:",o),e}));if(console.log("Is domain in list:",g),!g)return void s("Current page is not a known library resource",!1);const m=(await chrome.storage.local.get(o))[o]||[];console.log("Checking dismissed domains:",m);const u=m.find((o=>i.hostname.endsWith(o)||i.hostname===o));console.log("Matching dismissed domain:",u);!!u?(s("Banner is currently dismissed for this domain",!1),n.disabled=!1,n.textContent="Show Banner Again",n.onclick=async()=>{console.log("Show Banner Again button clicked for domain:",i.hostname);const e=u||i.hostname;console.log("Will undismiss domain:",e),await async function(e){try{console.log("Undismissing domain:",e);const t=(await chrome.storage.local.get(o))[o]||[];if(console.log("Current dismissed domains:",t),0===t.length)return console.warn("No dismissed domains found in storage"),void s("No dismissed domains found",!1);console.log("Checking each dismissed domain against:",e);let i=[];if(t.forEach((o=>{const n=e.endsWith(o),t=e===o;console.log(`Domain: ${o}, endsWith: ${n}, exactMatch: ${t}`),(t||n)&&i.push(o)})),console.log("Found matching dismissed domains:",i),0===i.length)return console.warn("Could not find any matching dismissed domains for:",e),void s("No matching domains found in dismissed list",!1);const r=t.filter((o=>!i.includes(o)));console.log("Updated dismissed domains:",r),await chrome.storage.local.set({[o]:r}),console.log("Saved updated dismissed domains list");const[a]=await chrome.tabs.query({active:!0,currentWindow:!0});if(console.log("Current tab:",a),a&&a.id){console.log("Sending updateIcon message for tab:",a.id);try{const o=await chrome.runtime.sendMessage({action:"updateIcon",tabId:a.id,isDismissed:!1});console.log("Response from updateIcon message:",o)}catch(o){console.error("Error sending updateIcon message:",o)}s("Banner will show again on next visit",!0),n.disabled=!0,n.textContent="Access via EZProxy",console.log("Reloading tab:",a.id),await chrome.tabs.reload(a.id),window.close()}}catch(o){console.error("Error undismissing domain:",o),s("Error updating settings",!1)}}(e)}):(s("This page is a known library resource",!0),n.disabled=!1,n.onclick=()=>async function(o){try{const e=await(await fetch(chrome.runtime.getURL("config.json"))).json();let n=o;n.startsWith("http://")?n=n.substring(7):n.startsWith("https://")&&(n=n.substring(8));let t=e.ezproxyBaseUrl;t.endsWith("/")||(t=`${t}/`);const s=`${t}${n}`;console.log("Redirecting to EZProxy URL:",s),await chrome.tabs.update({url:s}),window.close()}catch(o){console.error("Error redirecting to EZProxy:",o),s("Error redirecting to EZProxy",!1)}}(e.url))}catch(f){console.error("Error in popup:",f),s("Error checking current page",!1)}})),t.addEventListener("click",(async()=>{console.log("Reset button clicked");if(confirm("Are you sure you want to reset all dismissed domains? This will re-enable the banner for all previously dismissed domains."))try{console.log("Starting reset process...");t.textContent;t.disabled=!0,t.textContent="Resetting...",console.log("Clearing dismissed domains from storage..."),await chrome.storage.local.remove(o),console.log("Dismissed domains cleared");const e=await chrome.storage.local.get(o);console.log("Storage after clear:",e),s("Successfully reset all dismissed domains. Reloading page...",!0);const[n]=await chrome.tabs.query({active:!0,currentWindow:!0});if(console.log("Current active tab:",n),n&&n.id){console.log(`Updating icon for current tab ${n.id}`);try{await chrome.runtime.sendMessage({action:"updateIcon",tabId:n.id,isDismissed:!1}),console.log("Icon updated for current tab")}catch(o){console.error("Error updating icon for current tab:",o)}console.log("Reloading current tab..."),await chrome.tabs.reload(n.id),console.log("Current tab reloaded")}console.log("Updating icons for all tabs...");const i=await chrome.tabs.query({});for(const o of i)if(o.id&&o.id!==(null==n?void 0:n.id))try{await chrome.runtime.sendMessage({action:"updateIcon",tabId:o.id,isDismissed:!1}),console.log(`Updated icon for tab ${o.id}`)}catch(e){console.error(`Error updating icon for tab ${o.id}:`,e)}console.log("Reset process completed"),setTimeout((()=>{console.log("Closing popup..."),window.close()}),1e3)}catch(o){console.error("Error in reset process:",o),s("Error: "+(o.message||"Failed to reset domains"),!1),t.disabled=!1,t.textContent="Try Again"}else console.log("Reset cancelled by user")}));
//# sourceMappingURL=popup.bundle.js.map