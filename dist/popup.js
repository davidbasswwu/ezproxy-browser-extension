(()=>{const e="ezproxy-dismissed-domains";let t=[];const s=document.getElementById("status"),n=document.getElementById("accessButton"),i=document.getElementById("resetDismissed");function a(e,t){s&&(s.textContent=e,s.className="status "+(t?"active":"inactive"),n&&(n.disabled=!t&&"Banner is currently dismissed for this domain"!==e))}document.addEventListener("DOMContentLoaded",(async()=>{try{a("Checking current page...",!1);const[s]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!s||!s.url)return void a("Could not access current tab",!1);const i=await async function(){try{const e=chrome.runtime.getURL("domain-list.json"),s=await fetch(e);if(!s.ok)throw new Error(`Failed to fetch domain list: ${s.status} ${s.statusText}`);const n=s.headers.get("content-type");!n||n.includes("application/json");const i=await s.json();let a=[];return Array.isArray(i)?(a=i,t=[]):i&&Array.isArray(i.domains)&&(a=i.domains,t=Array.isArray(i.exceptions)?i.exceptions:[]),a}catch(e){try{const e=(await chrome.storage.local.get("ezproxy-domain-list-backup"))["ezproxy-domain-list-backup"];return Array.isArray(e)?e:[]}catch(e){return[]}}}();if(!i||0===i.length)return void a("Domain list could not be loaded",!1);const o=new URL(s.url),r=await(await fetch(chrome.runtime.getURL("config.json"))).json(),c=r.ezproxyBaseUrl,d=r.libraryHelpUrl,l=r.secondaryHelpButtonText||"Info for this site";if(o.hostname.includes(c)){a("You are already on a proxied page.",!0),n.disabled=!1,n.textContent=l;const e=function(e,t){const s=e.replace("."+t,""),n=s.replace(/-/g,"."),i=n.split(".");return i.length<=2?n:i.slice(-2).join(".")}(o.hostname,c);let t=d;return t&&(t+=(t.includes("?")?"&":"?")+"q="+encodeURIComponent(e)),void(n.onclick=()=>{chrome.tabs.create({url:t}),window.close()})}if(Array.isArray(t)&&t.some((e=>o.hostname.endsWith(e)||o.hostname===e))){const e=o.hostname.split(".").slice(-2).join(".");let t=d;return t&&(t+=(t.includes("?")?"&":"?")+"q="+encodeURIComponent(e)),a("This site may require special access. See library help.",!0),n.disabled=!1,n.textContent=l,void(n.onclick=()=>{chrome.tabs.create({url:t}),window.close()})}if(!i.some((e=>{const t=o.hostname.endsWith(e)||o.hostname===e;return t})))return void a("Current page is not a known library resource",!1);const m=await chrome.storage.local.get(e),u=(m[e]||[]).find((e=>o.hostname.endsWith(e)||o.hostname===e));!!u?(a("Banner is currently dismissed for this domain",!1),n.disabled=!1,n.textContent="Show Banner Again",n.onclick=async()=>{const t=u||o.hostname;await async function(t){try{const s=(await chrome.storage.local.get(e))[e]||[];if(0===s.length)return void a("No dismissed domains found",!1);let i=[];if(s.forEach((e=>{const s=t.endsWith(e);(t===e||s)&&i.push(e)})),0===i.length)return void a("No matching domains found in dismissed list",!1);const o=s.filter((e=>!i.includes(e)));await chrome.storage.local.set({[e]:o});const[r]=await chrome.tabs.query({active:!0,currentWindow:!0});if(r&&r.id){try{await chrome.runtime.sendMessage({action:"updateIcon",tabId:r.id,isDismissed:!1})}catch(e){}a("Banner will show again on next visit",!0),n.disabled=!0,n.textContent="Access via EZProxy",await chrome.tabs.reload(r.id),window.close()}}catch(e){a("Error updating settings",!1)}}(t)}):(a("This page is a known library resource",!0),n.disabled=!1,n.onclick=()=>async function(e){try{const t=await(await fetch(chrome.runtime.getURL("config.json"))).json();let s=e;s.startsWith("http://")?s=s.substring(7):s.startsWith("https://")&&(s=s.substring(8));let n=t.ezproxyBaseUrl;n.endsWith("/")||(n=`${n}/`);const i=`${n}${s}`;await chrome.tabs.update({url:i}),window.close()}catch(e){a("Error redirecting to EZProxy",!1)}}(s.url))}catch(e){a("Error checking current page",!1)}})),i.addEventListener("click",(async()=>{if(confirm("Are you sure you want to reset all dismissed domains? This will re-enable the banner for all previously dismissed domains."))try{await chrome.storage.local.remove(e);await chrome.storage.local.get(e);a("Successfully reset all dismissed domains. Reloading page...",!0);const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t&&t.id){try{await chrome.runtime.sendMessage({action:"updateIcon",tabId:t.id,isDismissed:!1})}catch(e){}await chrome.tabs.reload(t.id)}const s=await chrome.tabs.query({});for(const e of s)if(e.id&&e.id!==(null==t?void 0:t.id))try{await chrome.runtime.sendMessage({action:"updateIcon",tabId:e.id,isDismissed:!1})}catch(e){}setTimeout((()=>{window.close()}),1e3)}catch(e){a("Error: "+(e.message||"Failed to reset domains"),!1),i.disabled=!1,i.textContent="Try Again"}}))})();
//# sourceMappingURL=popup.js.map