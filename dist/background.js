(()=>{let t=null,e=new Set;const r=new Map;async function a(){try{const e=chrome.runtime.getURL("config.json"),r=await fetch(e);if(!r.ok)throw new Error(`Failed to load configuration: ${r.status}`);const a=await r.json(),n=["domainListUrl","ezproxyBaseUrl","institutionName","bannerMessage","updateInterval","retryAttempts","retryDelay","enableAutoRedirect","enableUserNotifications"].filter((t=>void 0===a[t]));if(n.length>0)throw new Error(`Missing required configuration fields: ${n.join(", ")}`);if("number"!=typeof a.updateInterval||a.updateInterval<6e4)throw new Error("updateInterval must be a number >= 60000ms (1 minute)");if("number"!=typeof a.retryAttempts||a.retryAttempts<0)throw new Error("retryAttempts must be a non-negative number");if("number"!=typeof a.retryDelay||a.retryDelay<0)throw new Error("retryDelay must be a non-negative number");return t=a,!0}catch(t){throw t}}async function n(){try{const a=await chrome.storage.local.get(["domainList","lastUpdate"]);if(a.domainList&&Array.isArray(a.domainList)){e=new Set(a.domainList);const r=Date.now(),n=a.lastUpdate||0;if(r-n<t.updateInterval)return}const n=await async function(e,r=t.retryAttempts,a=t.retryDelay){let n;for(let t=1;t<=r;t++)try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);return t}catch(e){if(n=e,t<r){const e=a*Math.pow(2,t-1);await new Promise((t=>setTimeout(t,e)))}}throw n}(t.domainListUrl,t.retryAttempts,t.retryDelay);if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const o=await n.json();if(!Array.isArray(o))throw new Error("Remote domain list is not an array");const i=o.filter((t=>"string"==typeof t&&t.length>0)).map((t=>t.toLowerCase().trim())).filter((t=>{try{return new URL(t.startsWith("http")?t:`https://${t}`),!0}catch{return!1}}));if(0===i.length)throw new Error("No valid domains found in the domain list");return e=new Set(i),await chrome.storage.local.set({domainList:Array.from(e),lastUpdate:Date.now()}),r.clear(),!0}catch(t){if(0===e.size){try{const t=await async function(){try{const t=chrome.runtime.getURL("domain-list.json"),e=await fetch(t);if(!e.ok)throw new Error(`Failed to load local domain list: ${e.status}`);const r=await e.json();if(!Array.isArray(r))throw new Error("Domain list must be an array");return new Set(r.filter((t=>"string"==typeof t&&t.length>0)))}catch(t){return new Set}}();if(t.size>0)return e=t,!0}catch(t){}throw new Error("No domain list available. Please check your internet connection and try again.")}return!1}}function o(e,a){try{const n=new URL(e),o=function(t){if(r.has(t))return r.get(t);const e=t.replace(/\./g,"-");return r.set(t,e),e}(a),i=`${n.protocol}//${o}.${t.ezproxyBaseUrl}${n.pathname}${n.search}${n.hash}`;return new URL(i),i}catch(t){return null}}let i;async function s(){const t=await chrome.tabs.query({active:!0,currentWindow:!0});if(t&&t[0]&&t[0].id){const e=t[0].id;try{await c(e,!0),setTimeout((async()=>{await c(e,!1)}),3e3)}catch(t){}}}async function c(t,e){const r=(t,e=!1)=>chrome.runtime.getURL(`images/icon${e?"-dismissed":""}-${t}.png`),a={16:r(16,e),32:r(32,e),48:chrome.runtime.getURL("images/icon-48.png"),128:chrome.runtime.getURL("images/icon-128.png")},n=e?"EZProxy: Banner is dismissed for this domain":"EZProxy: Click to access library resources";try{if(t)try{return await chrome.action.setIcon({tabId:t,path:a}),await chrome.action.setTitle({tabId:t,title:n}),await chrome.action.setBadgeText({tabId:t,text:e?"X":""}),void await chrome.action.setBadgeBackgroundColor({tabId:t,color:e?"#dc3545":[0,0,0,0]})}catch(t){}await chrome.action.setIcon({tabId:void 0,path:a}),await chrome.action.setTitle({tabId:void 0,title:n})}catch(t){throw t}}chrome.tabs.onUpdated.addListener((async(t,e,r)=>{if("complete"===e.status&&r.url)try{const e=new URL(r.url).hostname,a=await chrome.storage.local.get("ezproxy-dismissed-domains"),n=(a["ezproxy-dismissed-domains"]||[]).some((t=>e.endsWith(t)||e===t));await c(t,n)}catch(t){}})),chrome.runtime.onMessage.addListener(((e,r,n)=>"updateIcon"===e.action?(c(e.tabId,e.isDismissed).then((()=>n({success:!0}))).catch((t=>{n({success:!1,error:t.message})})),!0):"dismissDomain"===e.action?(chrome.tabs.query({active:!0,currentWindow:!0},(t=>{t&&t[0]&&t[0].id?c(t[0].id,!0).then((()=>{n({success:!0})})).catch((t=>{n({success:!1,error:t.message})})):n({success:!1,error:"No active tab found"})})),!0):"getTab"===e.action?(chrome.tabs.query({active:!0,currentWindow:!0},(t=>{n(t)})),!0):"getTabId"===e.action?(n({tabId:r.tab?r.tab.id:null}),!0):"GET_CONFIG"===e.type&&(t?n({config:t}):a().then((()=>n({config:t}))).catch((t=>{n({error:"Failed to load configuration"})})),!0))),async function(){try{await a(),await n(),setInterval(n,t.updateInterval),setTimeout(s,1e3)}catch(t){throw t}}(),chrome.tabs.onUpdated.addListener(((r,a,n)=>{"complete"===a.status&&n.url&&(n.url.startsWith("http://")||n.url.startsWith("https://"))&&function(t,e=100){clearTimeout(i),i=setTimeout(t,e)}((()=>{try{const a=new URL(n.url),i=a.hostname.replace(/^www\./,"");let s=null;if(e.has(i))s=i;else for(const t of e)if(i.endsWith("."+t)){s=t;break}if(s){const e=o(n.url,s);if(!e)return;const a=(o=0)=>{chrome.tabs.sendMessage(r,{type:"DOMAIN_MATCH",domain:s,originalUrl:n.url,ezproxyUrl:e,bannerMessage:t.bannerMessage}).catch((t=>{t.message.includes("Receiving end does not exist")&&o<3?setTimeout((()=>a(o+1)),500*(o+1)):t.message.includes("Receiving end does not exist")}))};a()}}catch(t){}}))}))})();
//# sourceMappingURL=background.js.map